const { connection } = require('../db/DB');

// USUARIOS
const listarUsuarios = (req, res) => {
    const query = `SELECT u.*, r.nombreRol FROM usuarios u JOIN roles r ON u.idRol = r.idRol`;
    connection.query(query, (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener usuarios" });
        res.json(results);
    });
};

const crearUsuario = (req, res) => {
    const { nombre, apellido, email, password, idRol } = req.body;
    if (!nombre || !apellido || !email || !password || !idRol) {
        return res.status(400).json({ error: "Faltan datos obligatorios" });
    }
    // Validar email único
    connection.query('SELECT * FROM usuarios WHERE email=?', [email], (err, results) => {
        if (err) return res.status(500).json({ error: "Error al validar email" });
        if (results.length > 0) return res.status(409).json({ error: "El email ya está registrado" });
        const query = 'INSERT INTO usuarios (nombre, apellido, email, password, idRol) VALUES (?, ?, ?, ?, ?)';
        connection.query(query, [nombre, apellido, email, password, idRol], (err2, result) => {
            if (err2) return res.status(500).json({ error: "Error al crear usuario" });
            // Registrar en historial de cambios
            registrarHistorial('usuarios', result.insertId, 'crear', email, `Usuario creado: ${nombre} ${apellido}`);
            res.json({ mensaje: "Usuario creado", id: result.insertId });
        });
    });
};

const actualizarUsuario = (req, res) => {
    const { id } = req.params;
    const { nombre, apellido, email, password, idRol } = req.body;
    // Validar existencia
    connection.query('SELECT * FROM usuarios WHERE idUsuario=?', [id], (err, results) => {
        if (err) return res.status(500).json({ error: "Error al buscar usuario" });
        if (results.length === 0) return res.status(404).json({ error: "Usuario no encontrado" });
        const query = 'UPDATE usuarios SET nombre=?, apellido=?, email=?, password=?, idRol=? WHERE idUsuario=?';
        connection.query(query, [nombre, apellido, email, password, idRol, id], (err2, result) => {
            if (err2) return res.status(500).json({ error: "Error al actualizar usuario" });
            registrarHistorial('usuarios', id, 'actualizar', email, `Usuario actualizado: ${nombre} ${apellido}`);
            res.json({ mensaje: "Usuario actualizado" });
        });
    });
};

const eliminarUsuario = (req, res) => {
    const { id } = req.params;
    connection.query('SELECT * FROM usuarios WHERE idUsuario=?', [id], (err, results) => {
        if (err) return res.status(500).json({ error: "Error al buscar usuario" });
        if (results.length === 0) return res.status(404).json({ error: "Usuario no encontrado" });
        const email = results[0].email;
        connection.query('DELETE FROM usuarios WHERE idUsuario=?', [id], (err2, result) => {
            if (err2) return res.status(500).json({ error: "Error al eliminar usuario" });
            registrarHistorial('usuarios', id, 'eliminar', email, `Usuario eliminado`);
            res.json({ mensaje: "Usuario eliminado" });
        });
    });
};
// SUCURSALES
const listarSucursales = (req, res) => {
    connection.query('SELECT * FROM sucursales', (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener sucursales" });
        res.json(results);
    });
};

// CLIENTES
const listarClientes = (req, res) => {
    const query = `SELECT c.*, u.nombre, u.apellido, u.email FROM clientes c JOIN usuarios u ON c.idUsuario = u.idUsuario`;
    connection.query(query, (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener clientes" });
        res.json(results);
    });
};

// SERVICIOS POSTVENTA
const listarServicios = (req, res) => {
    connection.query('SELECT * FROM servicios_postventa', (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener servicios" });
        res.json(results);
    });
};

// HISTORIAL DE CAMBIOS
const registrarHistorial = (tabla, idRegistro, accion, usuario, descripcion) => {
    const query = 'INSERT INTO historial_cambios (tabla, idRegistro, accion, usuario, descripcion) VALUES (?, ?, ?, ?, ?)';
    connection.query(query, [tabla, idRegistro, accion, usuario, descripcion], (err) => {
        if (err) console.error('Error al registrar historial:', err);
    });
};

// PRODUCTOS
const listarProductos = (req, res) => {
    const query = `SELECT idProducto, nombre, descripcion, precio, stockTotal AS stock FROM productos`;
    connection.query(query, (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener productos" });
        res.json(results);
    });
};

const crearProducto = (req, res) => {
    const { nombre, descripcion, precio, stockTotal } = req.body;
    if (!nombre || !precio) {
        return res.status(400).json({ error: "Faltan datos obligatorios" });
    }
    const query = 'INSERT INTO productos (nombre, descripcion, precio, stockTotal) VALUES (?, ?, ?, ?)';
    connection.query(query, [nombre, descripcion, precio, stockTotal], (err, result) => {
        if (err) return res.status(500).json({ error: "Error al crear producto" });
        res.json({ mensaje: "Producto creado", id: result.insertId });
    });
};

const actualizarProducto = (req, res) => {
    const { id } = req.params;
    const { nombre, descripcion, precio, stockTotal } = req.body;
    const query = 'UPDATE productos SET nombre=?, descripcion=?, precio=?, stockTotal=? WHERE idProducto=?';
    connection.query(query, [nombre, descripcion, precio, stockTotal, id], (err, result) => {
        if (err) return res.status(500).json({ error: "Error al actualizar producto" });
        res.json({ mensaje: "Producto actualizado" });
    });
};

const eliminarProducto = (req, res) => {
    const { id } = req.params;
    const query = 'DELETE FROM productos WHERE idProducto=?';
    connection.query(query, [id], (err, result) => {
        if (err) return res.status(500).json({ error: "Error al eliminar producto" });
        res.json({ mensaje: "Producto eliminado" });
    });
};

// PEDIDOS (VENTAS)
const listarPedidos = (req, res) => {
    const query = `
        SELECT pe.idPedido, u.nombre AS nombreUsuario, pe.fecha
        FROM pedidos pe
        JOIN usuarios u ON pe.idCliente = u.idUsuario
        ORDER BY pe.fecha DESC
    `;
    connection.query(query, (err, pedidos) => {
        if (err) return res.status(500).json({ error: "Error al obtener pedidos" });
        if (!pedidos.length) return res.json([]);
        // Obtener productos de cada pedido
        const ids = pedidos.map(p => p.idPedido);
        const queryDetalles = `
            SELECT dp.idPedido, pr.nombre AS nombreProducto, dp.cantidad, dp.precioUnitario
            FROM detalle_pedido dp
            JOIN productos pr ON dp.idProducto = pr.idProducto
            WHERE dp.idPedido IN (${ids.join(',')})
        `;
        connection.query(queryDetalles, (err2, detalles) => {
            if (err2) return res.status(500).json({ error: "Error al obtener detalles" });
            // Agrupar productos por pedido
            const pedidosFinal = pedidos.map(p => {
                const productos = detalles.filter(d => d.idPedido === p.idPedido)
                  .map(d => ({ nombre: d.nombreProducto, cantidad: d.cantidad, total: d.cantidad * d.precioUnitario }));
                const total = productos.reduce((acc, prod) => acc + prod.total, 0);
                return { ...p, productos, total };
            });
            res.json(pedidosFinal);
        });
    });
};

const crearPedido = (req, res) => {
    const { idCliente, estado, idSucursalOrigen, productos } = req.body;
    if (!idCliente || !estado || !idSucursalOrigen || !productos || !Array.isArray(productos)) {
        return res.status(400).json({ error: "Faltan datos obligatorios o productos no es un array" });
    }
    const queryPedido = 'INSERT INTO pedidos (idCliente, estado, idSucursalOrigen) VALUES (?, ?, ?)';
    connection.query(queryPedido, [idCliente, estado, idSucursalOrigen], (err, result) => {
        if (err) return res.status(500).json({ error: "Error al crear pedido" });
        const idPedido = result.insertId;
        // Insertar productos en detalle_pedido
        const queryDetalle = 'INSERT INTO detalle_pedido (idPedido, idProducto, cantidad, precioUnitario) VALUES ?';
        const values = productos.map(p => [idPedido, p.idProducto, p.cantidad, p.precioUnitario]);
        connection.query(queryDetalle, [values], (err2) => {
            if (err2) return res.status(500).json({ error: "Pedido creado pero error en detalle_pedido" });
            // Actualizar stock en stock_sucursal
            productos.forEach(p => {
                connection.query('UPDATE stock_sucursal SET stockDisponible = stockDisponible - ? WHERE idProducto=?', [p.cantidad, p.idProducto], (err3) => {
                    if (err3) console.error('Error al actualizar stock:', err3);
                });
            });
            registrarHistorial('pedidos', idPedido, 'crear', idCliente, `Pedido creado con productos: ${JSON.stringify(productos)}`);
            res.json({ mensaje: "Pedido creado", idPedido });
        });
    });
};

const verDetallePedido = (req, res) => {
    const { id } = req.params;
    const query = `SELECT pe.*, dp.idProducto, dp.cantidad, dp.precioUnitario
                   FROM pedidos pe
                   JOIN detalle_pedido dp ON pe.idPedido = dp.idPedido
                   WHERE pe.idPedido = ?`;
    connection.query(query, [id], (err, results) => {
        if (err) return res.status(500).json({ error: "Error al obtener detalle de pedido" });
        res.json(results);
    });
};

const eliminarPedido = (req, res) => {
    const { id } = req.params;
    // Primero eliminar los detalles
    connection.query('DELETE FROM detalle_pedido WHERE idPedido=?', [id], (err) => {
        if (err) return res.status(500).json({ error: "Error al eliminar detalle de pedido" });
        // Luego eliminar el pedido
        connection.query('DELETE FROM pedidos WHERE idPedido=?', [id], (err2) => {
            if (err2) return res.status(500).json({ error: "Error al eliminar pedido" });
            res.json({ mensaje: "Pedido eliminado" });
        });
    });
};

module.exports = {
    listarUsuarios,
    crearUsuario,
    actualizarUsuario,
    eliminarUsuario,
    listarProductos,
    crearProducto,
    actualizarProducto,
    eliminarProducto,
    listarPedidos,
    crearPedido,
    verDetallePedido,
    eliminarPedido,
    listarSucursales,
    listarClientes,
    listarServicios
};